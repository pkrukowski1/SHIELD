"""
The implementation is based on: https://adversarial-attacks-pytorch.readthedocs.io/en/latest/_modules/torchattacks/attacks/pgd.html#PGD
"""

import torch
import torch.nn as nn


class PGD:
    """
    PGD in the paper 'Towards Deep Learning Models Resistant to Adversarial Attacks'
    [https://arxiv.org/abs/1706.06083]

    Distance Measure : Linf

    Arguments:
        model (nn.Module): model to attack.
        target_weights (list): list of weights to be used for the attack. The weights are generated by a hypernetwork.
        eps (float): maximum perturbation. (Default: 8/255)
        alpha (float): step size. (Default: 2/255)
        steps (int): number of steps. (Default: 10)
        random_start (bool): using random initialization of delta. (Default: True)

    Shape:
        - images: :math:`(N, C, H, W)` where `N = number of batches`, `C = number of channels`,        `H = height` and `W = width`. It must have a range [0, 1].
        - labels: :math:`(N)` where each value :math:`y_i` is :math:`0 \leq y_i \leq` `number of labels`.
        - output: :math:`(N, C, H, W)`.

    Examples::
        >>> attack = torchattacks.PGD(model, eps=8/255, alpha=1/255, steps=10, random_start=True)
        >>> adv_images = attack(images, labels)

    """

    def __init__(self, model, target_weights, eps=8/255, alpha=2/255, steps=10, random_start=True, device="cpu"):
        super().__init__()
        self.model = model  
        self.target_weights = target_weights
        self.eps = eps
        self.alpha = alpha
        self.steps = steps
        self.random_start = random_start
        self.device = device

    def forward(self, images, labels, task_id):
        """
        Performs the forward pass of the PGD (Projected Gradient Descent) attack to generate adversarial examples.
        Args:
            images (torch.Tensor): The input images to be perturbed. Shape: (batch_size, channels, height, width).
            labels (torch.Tensor): The true labels corresponding to the input images. Shape: (batch_size,).
            task_id (int): An identifier for the specific task (not used directly in this method).
        Returns:
            torch.Tensor: The adversarially perturbed images. Shape: (batch_size, channels, height, width).
        Notes:
            - If `self.targeted` is True, the attack aims to generate adversarial examples that are classified as the target labels.
            - If `self.random_start` is True, the attack starts from a random perturbation within the epsilon ball.
            - The attack iteratively updates the adversarial images using the sign of the gradient of the loss with respect to the input.
            - The perturbations are clipped to ensure they remain within the epsilon ball and valid image range [0, 1].
        """
       
        images = images.clone().detach().to(self.device)
        labels = labels.clone().detach().to(self.device)


        loss = nn.CrossEntropyLoss()
        adv_images = images.clone().detach()

        if self.random_start:
            # Starting at a uniformly random point
            adv_images = adv_images + torch.empty_like(adv_images).uniform_(
                -self.eps, self.eps
            )
            adv_images = torch.clamp(adv_images, min=0, max=1).detach()

        for _ in range(self.steps):
            adv_images.requires_grad = True
            outputs, _ = self.model(adv_images, epsilon=0.0, weights=self.target_weights, condition=task_id)

            # Calculate loss
            cost = loss(outputs, labels)

            # Update adversarial images
            grad = torch.autograd.grad(
                cost, adv_images, retain_graph=False, create_graph=False
            )[0]

            adv_images = adv_images.detach() + self.alpha * grad.sign()
            delta = torch.clamp(adv_images - images, min=-self.eps, max=self.eps)
            adv_images = torch.clamp(images + delta, min=0, max=1).detach()

        return adv_images

