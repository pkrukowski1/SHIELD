"""
The implementation is based on the following implementation: https://adversarial-attacks-pytorch.readthedocs.io/en/latest/_modules/torchattacks/attacks/fgsm.html#FGSM
"""

import torch
import torch.nn as nn


class FGSM:
    r"""
    FGSM in the paper 'Explaining and harnessing adversarial examples'
    [https://arxiv.org/abs/1412.6572]

    Distance Measure : Linf

    Arguments:
        model (nn.Module): model to attack.
        target_weights (list): list of weights to be used for the attack. The weights are generated by a hypernetwork.
        eps (float): maximum perturbation. (Default: 8/255)
        device (str): device to use. (Default: "cpu")

    Shape:
        - images: :math:`(N, C, H, W)` where `N = number of batches`, `C = number of channels`,        `H = height` and `W = width`. It must have a range [0, 1].
        - labels: :math:`(N)` where each value :math:`y_i` is :math:`0 \leq y_i \leq` `number of labels`.
        - output: :math:`(N, C, H, W)`.

    Examples::
        >>> attack = torchattacks.FGSM(model, target_weights, eps=8/255, device="cuda")
        >>> adv_images = attack(images, labels)

    """

    def __init__(self, model, target_weights, eps=8/255, device="cpu"):
        super().__init__()
        self.model = model
        self.target_weights = target_weights
        self.eps = eps
        self.device = device

    def forward(self, images, labels, task_id):
        """
        Generates adversarial examples using the Fast Gradient Sign Method (FGSM).
        Args:
            images (torch.Tensor): The input images to perturb, of shape (N, C, H, W),
                where N is the batch size, C is the number of channels, H is the height,
                and W is the width.
            labels (torch.Tensor): The ground truth labels corresponding to the input images.
            task_id (int): The identifier for the specific task or condition to be used
                in the model's forward pass.
        Returns:
            torch.Tensor: The adversarially perturbed images, of the same shape as the input images.
        """
        

        images = images.clone().detach().to(self.device)
        labels = labels.clone().detach().to(self.device)

        loss = nn.CrossEntropyLoss()

        images.requires_grad = True
        outputs, _ = self.model(images, epsilon=0.0, weights=self.target_weights, condition=task_id)

        cost = loss(outputs, labels)

        # Update adversarial images
        grad = torch.autograd.grad(
            cost, images, retain_graph=False, create_graph=False
        )[0]

        adv_images = images + self.eps * grad.sign()
        adv_images = torch.clamp(adv_images, min=0, max=1).detach()

        return adv_images

